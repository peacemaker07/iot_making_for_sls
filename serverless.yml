# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: iot-making-for-sls
#app: your-app-name
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.7
  timeout: 300
  stage: ${opt:stage}
  region: ap-northeast-1
  profile: iot_making

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
  environment:
    TZ: ${file(./serverless.env.yml):TZ}
    AUTH0_DOMAIN: ${file(./serverless.env.yml):AUTH0_DOMAIN}
    API_AUDIENCE: ${file(./serverless.env.yml):API_AUDIENCE}
    SLACK_NOTIFY_URL: ${file(./serverless.env.yml):SLACK_NOTIFY_URL}
    LINE_NOTIFY_ACCESS_TOKEN: ${file(./serverless.env.yml):LINE_NOTIFY_ACCESS_TOKEN}
    NAME_PREFIX: ${file(./serverless.env.yml):NAME_PREFIX}
    ENV: ${opt:stage}
    TWITTER_CONSUMER_KEY: ${file(./serverless.env.yml):TWITTER_CONSUMER_KEY}
    TWITTER_CONSUMER_SECRET: ${file(./serverless.env.yml):TWITTER_CONSUMER_SECRET}
    TWITTER_ACCESS_TOKEN: ${file(./serverless.env.yml):TWITTER_ACCESS_TOKEN}
    TWITTER_ACCESS_TOKEN_SECRET: ${file(./serverless.env.yml):TWITTER_ACCESS_TOKEN_SECRET}

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
#  environment:
#    handler: handler.environment
#    role: IotActionRoleForLambda
#    events:
#      - iot:
#          name: "Environment"
#          sql: "SELECT *, topic(2) as imsi FROM 'environment/+'"
#          description: "Debug Environment Action"
  #
  # Amazon API Gateway: センシングデータの取得
  #
  range_environment:
    handler: handler.range_environment
    role: IotActionRoleForLambda
    events:
      - http:
          path: environment/range
          method: get
          authorizer:
            name: jwt_rsa_custom_authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
            type: token
  #
  # Amazon API Gateway: デバイス情報の取得
  #
  iot_devices:
    handler: handler.iot_devices
    role: IotActionRoleForLambda
    events:
      - http:
          path: iot_devices
          method: get
          authorizer:
            name: jwt_rsa_custom_authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
            type: token
  #
  # Amazon API Gateway: Lambdaオーソライザー
  #
  jwt_rsa_custom_authorizer:
    handler: handler.jwt_rsa_custom_authorizer
  #
  # AWS IoT CoreのActionでLambdaを実行
  #
  notify:
    handler: handler.notify
    role: IotActionRoleForLambda
    events:
      - iot:
          name: "Notify"
          sql: "SELECT *, topic(2) as imsi FROM 'environment/+'"
          description: "Notify to slack and LINE Notify"
  #
  # S3への一時的なアクセス権をSTSから取得する
  #
  create_token_for_image_upload:
    handler: handler.create_token_for_image_upload
    role: CreateTokenRole
    events:
      - iot:
          name: "CreateTokenForImageUpload"
          sql: "SELECT topic(3) AS imsi FROM 'token/req/+'"
          description: "create token for image upload"
  #
  # センシングデータを受信時にLambdaを実行する
  #
  notification_sensor_environment:
    handler: handler.notification_sensor_environment
    role: IotActionRoleForLambda
    events:
      - iot:
          name: "NotificationSensorEnvironment"
          sql: "SELECT *, topic(2) as imsi FROM 'environment/+'"
          description: "notification sensor environment"
  #
  # S3 TriggerでLambdaを起動
  # https://serverless.com/framework/docs/providers/aws/events/s3/
  #
  notification_twitter:
    handler: handler.notification_twitter
    role: S3TriggerRoleForLambda
    events:
      - s3:
          bucket: ${file(./serverless.env.yml):NAME_PREFIX}-iot-making-${opt:stage}
          event: s3:ObjectCreated:*
          rules:
            - suffix: .jpg
          existing: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    #
    # S3 bucketの構築
    #
    IoTMakingBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${file(./serverless.env.yml):NAME_PREFIX}-iot-making-${opt:stage}
    #
    # DynamoDBのテーブル構築
    #
    # センシングしたデータの保存先
    DynamoDbEnvironment:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: environment-from-soracom-${opt:stage}
        AttributeDefinitions:
          - AttributeName: imsi
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: imsi
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        # プロビジョニング用設定値
        # ProvisionedThroughput:
        #   ReadCapacityUnits: 3
        #   WriteCapacityUnits: 3
        # On-Demand用設定値
        BillingMode: PAY_PER_REQUEST
    # デバイスのマスタ
    DynamoDbDevice:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: iot-device-${opt:stage}
        AttributeDefinitions:
          - AttributeName: imsi
            AttributeType: S
        KeySchema:
          - AttributeName: imsi
            KeyType: HASH
        # プロビジョニング用設定値
        # ProvisionedThroughput:
        #   ReadCapacityUnits: 3
        #   WriteCapacityUnits: 3
        # On-Demand用設定値
        BillingMode: PAY_PER_REQUEST
    # S3へアップロードした画像情報
    DynamoDbCamImages:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: cam_images-${opt:stage}
        AttributeDefinitions:
          - AttributeName: imsi
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: imsi
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        # ProvisionedThroughput:
        #   ReadCapacityUnits: 3
        #   WriteCapacityUnits: 3
        # On-Demand用設定値
        BillingMode: PAY_PER_REQUEST
    #
    # Role, Policy
    #
    # AWS IoT Rule用のRole
    IoTRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - iot.amazonaws.com
              Action:
                - sts:AssumeRole
    # AWS IoT DynamoDBv2アクションのPolicy
    IoTDynamoDBPutItemPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: IoTDynamoDBPutItemPolicy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource: "*"
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: "*"
        Roles: [ Ref: IoTRole ]
    # ルール、アクションを使用してLambdaを実行時のRole
    IotActionRoleForLambda:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: IotActionRoleForLambda
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: LogsPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        -
                          - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - '*'
                - Effect: Allow
                  Action:
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:Query
                  Resource:
                    - 'Fn::Join':
                        - ''
                        -
                          - 'arn:aws:dynamodb:'
                          - Ref: 'AWS::Region'
                          - ':'
                          - Ref: 'AWS::AccountId'
                          - ":table/"
                          - Ref: DynamoDbEnvironment
                - Effect: Allow
                  Action:
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:Query
                  Resource:
                    - 'Fn::Join':
                        - ''
                        -
                          - 'arn:aws:dynamodb:'
                          - Ref: 'AWS::Region'
                          - ':'
                          - Ref: 'AWS::AccountId'
                          - ":table/"
                          - Ref: DynamoDbDevice
                - Effect: Allow
                  Action:
                    - iot:*
                  # TODO リソースを絞る
                  Resource: '*'
    # S3 TriggerでLambda実行時のRole
    S3TriggerRoleForLambda:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: S3TriggerRoleForLambda
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: S3TriggerPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - '*'
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                  Resource:
                    - 'Fn::Join':
                        - ''
                        - - 'arn:aws:s3:::'
                          - Ref: IoTMakingBucket
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource:
                    - 'Fn::Join':
                        - ''
                        - - 'arn:aws:s3:::'
                          - Ref: IoTMakingBucket
                          - '/*'
    # S3への一時的なアクセス権をSTSから取得する時のRole
    CreateTokenRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: create_token_role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: CreateTokenPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        -
                          - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - '*'
                - Effect: Allow
                  Action:
                    - iot:*
                  Resource: '*'
    ImageUploadS3:
      Type: AWS::IAM::Role
      Properties:
        RoleName: image_upload_s3_role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - s3.amazonaws.com
              Action:
                - sts:AssumeRole
            - Effect: Allow
              Principal:
                AWS:
                  - Fn::GetAtt: [CreateTokenRole, Arn]
              Action:
                - sts:AssumeRole
    CreateUploadThingRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: create_upload_thing_role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
    StsPublishPolicies:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: StsPublishPolicy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - sts:AssumeRole
              Resource:
                Fn::GetAtt:
                  - ImageUploadS3
                  - Arn
        Roles: [ Ref: CreateTokenRole ]
    LambdaCreatePolicies:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: lambdaCreatePolicy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - iot:Publish
              Resource:
                - 'Fn::Join':
                    - ''
                    -
                      - "arn:aws:iot:"
                      - Ref: 'AWS::Region'
                      - ':'
                      - Ref: 'AWS::AccountId'
                      - ':'
                      - "topic/image_upload/token/res/*"
        Roles: [ Ref: CreateTokenRole ]
    CreateUploadThingPolicies:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: CreateUploadThingPolicy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                - 'Fn::Join':
                    - ':'
                    -
                      - 'arn:aws:logs'
                      - Ref: 'AWS::Region'
                      - Ref: 'AWS::AccountId'
                      - "*"
            - Effect: Allow
              Action:
                - iot:AttachPrincipalPolicy
                - iot:CreateThing
                - iot:AttachThingPrincipal
                - iot:ListThingPrincipals
                - iot:DetachThingPrincipal
                - iot:ListCertificates
                - iot:GetThingShadow
                - iot:UpdateThingShadow
              Resource: "*"
        Roles: [ Ref: CreateUploadThingRole ]
    S3WritePolicies:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: S3WritePolicy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
              Resource:
                Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - "Ref" : "IoTMakingBucket"
                    - "/*"
        Roles: [ Ref: ImageUploadS3 ]
    S3ListPolicies:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: S3ListPolicy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - s3:ListBucket
              Resource:
                Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - "Ref" : "IoTMakingBucket"
        Roles: [ Ref: ImageUploadS3 ]
    S3GetPolicies:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: S3GetPolicy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource:
                Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - "Ref" : "IoTMakingBucket"
                    - "/*"
        Roles: [ Ref: ImageUploadS3 ]
    #
    # AWS IoT ルール、アクション
    #
    # ルール、アクションを使用してDynamoDBへのレコード登録
    EnvironmentThingRule:
      Type: AWS::IoT::TopicRule
      Properties:
        TopicRulePayload:
          RuleDisabled: false
          Sql: "SELECT *, topic(2) as imsi FROM 'environment/+'"
          Actions:
            - DynamoDBv2:
                PutItem:
                  TableName:
                    Ref: DynamoDbEnvironment
                RoleArn:
                  Fn::GetAtt:
                    - IoTRole
                    - Arn
    # S3へアップロードした画像情報をDynamoDBへ登録するルール、アクション
    CamImagesThingRule:
      Type: AWS::IoT::TopicRule
      Properties:
        TopicRulePayload:
          RuleDisabled: false
          Sql: "SELECT *, topic(3) as imsi FROM 'cam/images/+'"
          Actions:
            - DynamoDBv2:
                PutItem:
                  TableName:
                    Ref: DynamoDbCamImages
                RoleArn:
                  Fn::GetAtt:
                    - IoTRole
                    - Arn

#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: true
